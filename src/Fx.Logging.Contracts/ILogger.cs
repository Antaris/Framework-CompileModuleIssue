// <copyright company="Fresh Egg Limited" file="ILogger.cs">
// Copyright © Fresh Egg Limited
// </copyright>

namespace Fx.Logging
{
    using System;

    /// <summary>
    /// Defines the required contract for implementing a logger.
    /// </summary>
    public interface ILogger
    {
        /// <summary>
        /// Gets the name of the logger.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Creates a child logger that uses the parent as a logging scope.
        /// </summary>
        /// <param name="name">The name of the child logger.</param>
        /// <returns>The child logged.</returns>
        ILogger CreateChildLogger(string name);

        /// <summary>
        /// Logs the specified debug message.
        /// </summary>
        /// <param name="message">The debug message.</param>
        void Debug(string message);

        /// <summary>
        /// Logs the specified exception as a debug message.
        /// </summary>
        /// <param name="exception">The exception.</param>
        void Debug(Exception exception);

        /// <summary>
        /// Logs the message generated by the given message factory.
        /// </summary>
        /// <remarks>The message is lazy evaluated only when Debug logging is enabled.</remarks>
        /// <param name="messageFactory">The message factory.</param>
        void Debug(Func<string> messageFactory);

        /// <summary>
        /// Logs the specified debug message.
        /// </summary>
        /// <param name="message">The debug message.</param>
        /// <param name="exception">The exception.</param>
        void Debug(string message, Exception exception);

        /// <summary>
        /// Logs a debug message that is generated from the given format string.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void DebugFormat(string format, params object[] args);

        /// <summary>
        /// Logs a debug message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void DebugFormat(Exception exception, string format, params object[] args);

        /// <summary>
        /// Logs a debug message that is generated from the given format string.
        /// </summary>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void DebugFormat(IFormatProvider provider, string format, params object[] args);

        /// <summary>
        /// Logs a debug message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void DebugFormat(Exception exception, IFormatProvider provider, string format, params object[] args);

        /// <summary>
        /// Logs the specified error message.
        /// </summary>
        /// <param name="message">The error message.</param>
        void Error(string message);

        /// <summary>
        /// Logs the specified exception as a error message.
        /// </summary>
        /// <param name="exception">The exception.</param>
        void Error(Exception exception);

        /// <summary>
        /// Logs the message generated by the given message factory.
        /// </summary>
        /// <remarks>The message is lazy evaluated only when Error logging is enabled.</remarks>
        /// <param name="messageFactory">The message factory.</param>
        void Error(Func<string> messageFactory);

        /// <summary>
        /// Logs the specified error message.
        /// </summary>
        /// <param name="message">The debug message.</param>
        /// <param name="exception">The exception.</param>
        void Error(string message, Exception exception);

        /// <summary>
        /// Logs a error message that is generated from the given format string.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void ErrorFormat(string format, params object[] args);

        /// <summary>
        /// Logs a error message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void ErrorFormat(Exception exception, string format, params object[] args);

        /// <summary>
        /// Logs a error message that is generated from the given format string.
        /// </summary>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void ErrorFormat(IFormatProvider provider, string format, params object[] args);

        /// <summary>
        /// Logs a error message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void ErrorFormat(Exception exception, IFormatProvider provider, string format, params object[] args);

        /// <summary>
        /// Logs the specified fatal message.
        /// </summary>
        /// <param name="message">The fatal message.</param>
        void Fatal(string message);

        /// <summary>
        /// Logs the specified exception as a fatal message.
        /// </summary>
        /// <param name="exception">The exception.</param>
        void Fatal(Exception exception);

        /// <summary>
        /// Logs the message generated by the given message factory.
        /// </summary>
        /// <remarks>The message is lazy evaluated only when Fatal logging is enabled.</remarks>
        /// <param name="messageFactory">The message factory.</param>
        void Fatal(Func<string> messageFactory);

        /// <summary>
        /// Logs the specified fatal message.
        /// </summary>
        /// <param name="message">The debug message.</param>
        /// <param name="exception">The exception.</param>
        void Fatal(string message, Exception exception);

        /// <summary>
        /// Logs a fatal message that is generated from the given format string.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void FatalFormat(string format, params object[] args);

        /// <summary>
        /// Logs a fatal message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void FatalFormat(Exception exception, string format, params object[] args);

        /// <summary>
        /// Logs a fatal message that is generated from the given format string.
        /// </summary>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void FatalFormat(IFormatProvider provider, string format, params object[] args);

        /// <summary>
        /// Logs a fatal message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void FatalFormat(Exception exception, IFormatProvider provider, string format, params object[] args);

        /// <summary>
        /// Logs the specified info message.
        /// </summary>
        /// <param name="message">The info message.</param>
        void Info(string message);

        /// <summary>
        /// Logs the specified exception as a info message.
        /// </summary>
        /// <param name="exception">The exception.</param>
        void Info(Exception exception);

        /// <summary>
        /// Logs the message generated by the given message factory.
        /// </summary>
        /// <remarks>The message is lazy evaluated only when Info logging is enabled.</remarks>
        /// <param name="messageFactory">The message factory.</param>
        void Info(Func<string> messageFactory);

        /// <summary>
        /// Logs the specified info message.
        /// </summary>
        /// <param name="message">The debug message.</param>
        /// <param name="exception">The exception.</param>
        void Info(string message, Exception exception);

        /// <summary>
        /// Logs a info message that is generated from the given format string.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void InfoFormat(string format, params object[] args);

        /// <summary>
        /// Logs a info message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void InfoFormat(Exception exception, string format, params object[] args);

        /// <summary>
        /// Logs a info message that is generated from the given format string.
        /// </summary>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void InfoFormat(IFormatProvider provider, string format, params object[] args);

        /// <summary>
        /// Logs a info message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void InfoFormat(Exception exception, IFormatProvider provider, string format, params object[] args);

        /// <summary>
        /// Logs the specified warning message.
        /// </summary>
        /// <param name="message">The warning message.</param>
        void Warning(string message);

        /// <summary>
        /// Logs the specified exception as a warning message.
        /// </summary>
        /// <param name="exception">The exception.</param>
        void Warning(Exception exception);

        /// <summary>
        /// Logs the message generated by the given message factory.
        /// </summary>
        /// <remarks>The message is lazy evaluated only when Warning logging is enabled.</remarks>
        /// <param name="messageFactory">The message factory.</param>
        void Warning(Func<string> messageFactory);

        /// <summary>
        /// Logs the specified warning message.
        /// </summary>
        /// <param name="message">The debug message.</param>
        /// <param name="exception">The exception.</param>
        void Warning(string message, Exception exception);

        /// <summary>
        /// Logs a warning message that is generated from the given format string.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void WarningFormat(string format, params object[] args);

        /// <summary>
        /// Logs a warning message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void WarningFormat(Exception exception, string format, params object[] args);

        /// <summary>
        /// Logs a warning message that is generated from the given format string.
        /// </summary>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void WarningFormat(IFormatProvider provider, string format, params object[] args);

        /// <summary>
        /// Logs a warning message that is generated from the given format string.
        /// </summary>
        /// <param name="exception">The exception.</param>
        /// <param name="provider">The format provider.</param>
        /// <param name="format">The format string.</param>
        /// <param name="args">The arguments.</param>
        void WarningFormat(Exception exception, IFormatProvider provider, string format, params object[] args);
    }
}